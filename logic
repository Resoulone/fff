import hashlib

import requests
import json
import re
import os
import uuid
from datetime import datetime

MASTER_REPORT_LIST = {
    '47': 'Отчет об объемах закупки этилового спирта',
    '48': 'Отчет об объемах поставки этилового спирта'
}


class Autho:
    @staticmethod
    def autho(params):
        session = requests.Session()
        if not params.get('inn') or not params.get('password'):
            raise ValueError("Login credentials are required")

        # Шаг 1. Получаем сессию и куки
        url = "https://service.fsrar.ru/"
        headers = {
            'User-Agent': 'Mozilla/5.0',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
        }

        response = session.get(url, headers=headers)
        if response.status_code != 200:
            raise Exception("Failed to connect to the service")

        # Шаг 2. Получаем CSRF token
        url_login = "https://service.fsrar.ru/auth/login"
        response = session.get(url_login, headers=headers, cookies=session.cookies.get_dict())

        match = re.search(r"\{[^}]*name:\s*'csrf'[^}]*\}", response.text)
        if not match:
            raise Exception("Failed to retrieve CSRF token")

        csrf_block = match.group(0)
        raw_data = csrf_block.replace("xtype", '"xtype"').replace("id", '"id"') \
            .replace("name", '"name"').replace("value", '"value"')
        corrected_data = re.sub(r"(?<=: )'(.*?)'", r'"\1"', raw_data).replace('"h"id"den"', '"hidden"')
        csrf_data = json.loads(corrected_data)
        csrf_token = csrf_data.get('value')

        # Подготовка данных для авторизации
        md5_hash = hashlib.md5(params['password'].encode()).hexdigest()
        login_data = {
            'inn': params['inn'],
            'csrf': csrf_token,
            'password': md5_hash,
            'user_type': 'power'
        }

        # Попытка логина
        response = session.post(url_login, data=login_data, headers=headers)
        if response.history and response.history[-1].status_code == 302:
            return session.cookies.get_dict()

        return None


class SiteHelper:
    def createReport(self, cookies, reportList):
        masterReport = []
        for report in reportList:
            reportBody = ''
            inn = report["inn"]
            kpp = report["kpp"]
            type = report["report_code"]
            dateFrom = report["start_date"]
            dateTo = report["end_date"]
            state_alias = report["additional_data"]

            if type == '47':
                reportBody = self.buildReportUrl(type, inn, kpp, dateFrom, dateTo, state_alias)
            elif type == '48':
                reportBody = self.buildReportUrlForType48(type, inn, kpp, dateFrom, dateTo, state_alias)
            # More elif conditions for additional report types here
            if reportBody:
                masterReport.append(
                    {"reportID": report["reportID"], "reportBody": reportBody, "IdRequest": "", "downloaded": False})

        return self.getIdRequest(cookies, masterReport)

    def buildReportUrl(self, type, inn, kpp, dateFrom, dateTo, state_alias):
        baseUrl = f"type={type}&inn={inn}&kpp={kpp}&return=WBInvoiceFromMe&date_begin={dateFrom}&date_end={dateTo}&state_alias="
        if state_alias in ['1', '2', '3']:
            return baseUrl + state_alias
        return None

    def buildReportUrlForType48(self, type, inn, kpp, dateFrom, dateTo, state_alias):
        baseUrl = f"type={type}&inn={inn}&kpp={kpp}&return=WBInvoiceFromMe&date_begin={dateFrom}&date_end={dateTo}&state_alias="
        options = {
            '1': "'Receipted'%2C'Confirmed'%2C'ImportedEGAIS'&isexport=1",
            '2': "'Receipted'&isexport=1",
            '3': "'Receipted'%2C..."
        }
        return baseUrl + options.get(state_alias, '')

    def getIdRequest(self, cookies, masterReport):
        for report in masterReport:
            requestDic = self.create_request(report["reportBody"], cookies)
            report["IdRequest"] = requestDic.get("ID", '')
        return masterReport

    def create_request(self, reportBody, cookies):
        url = "https://service.fsrar.ru/otchet/generate/"
        headers = {
            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            "Referer": "https://service.fsrar.ru/cabinet/home",
            "X-Requested-With": "XMLHttpRequest",
        }
        try:
            response = requests.post(url, headers=headers, data=reportBody, cookies=cookies)
            if response.status_code == 200:
                return response.json()
            return {"msg": f"Ошибка: {response.status_code}"}
        except requests.exceptions.RequestException as ex:
            return {"msg": str(ex)}

    def downloadFile(self, url, cookies, fileName):
        script_directory = os.path.dirname(os.path.abspath(__file__))
        download_directory = os.path.join(script_directory, "ReportForSite")
        os.makedirs(download_directory, exist_ok=True)
        file_path = os.path.join(download_directory, fileName)

        headers = {
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "User-Agent": 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36...',
        }
        try:
            response = requests.get(url, headers=headers, cookies=cookies)
            if response.status_code == 200:
                with open(file_path, 'wb') as file:
                    file.write(response.content)
                return True
            else:
                return False
        except Exception as e:
            print(f"An error occurred: {e}")
            return False


class createWorkingTask:
    @staticmethod
    def is_valid_inn(inn: str) -> bool:
        return inn.isdigit() and len(inn) in [10, 12]

    @staticmethod
    def is_valid_kpp(kpp: str) -> bool:
        return kpp.isdigit() and len(kpp) == 9

    @staticmethod
    def is_valid_date(date_str: str) -> bool:
        try:
            datetime.strptime(date_str, '%d.%m.%Y')
            return True
        except ValueError:
            return False

    @staticmethod
    def compare_dates(start_date: str, end_date: str) -> bool:
        start = datetime.strptime(start_date, '%d.%m.%Y')
        end = datetime.strptime(end_date, '%d.%m.%Y')
        return end > start
